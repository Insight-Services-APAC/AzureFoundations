{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "companyPrefix": {
            "type": "string",
            "maxLength": 5
        },
        "locationPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "environmentPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "argPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "omsPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "staPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForStorage": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSql": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKeyVault": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForArm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForDns": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKubernetes": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForRegistries": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableArcMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce Arc monitoring."
            }
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableLtrStorage": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "managementSubscriptionId": {
            "type": "string",
            "maxLength": 36,
            "defaultValue": ""
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": []
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": []
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": ""
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": ""
        }
    },
    "variables": {
        "policyDefinitions": {
            "deployAzActivityLogLa": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ActivityLog-La')]",
            "deployAzActivityLogSta": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ActivityLog-sta')]",
            "deployResourceDiagnostics": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diag-LogAnalytics')]",
            "windowsArcMonitoring": "/providers/Microsoft.Authorization/policyDefinitions/69af7d4a-7b18-4044-93a9-2651498ef203",
            "linuxArcMonitoring": "/providers/Microsoft.Authorization/policyDefinitions/9d2b61b4-1d14-4a63-be30-d4498e7ad2cf",
            "vmMonitoring": "/providers/Microsoft.Authorization/policySetDefinitions/55f3eceb-5573-4f18-9695-226972c6d74a",
            "vmssMonitoring": "/providers/Microsoft.Authorization/policySetDefinitions/75714362-cae7-409e-9b99-a8e5075b7fad",
            "deployAzureSecurity": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-Standard')]",
            "ascMonitoring": "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8"
        },
        "policyAssignmentNames": {
            "deployAzActivityLogLa": "Deploy-AzActivity-La",
            "deployAzActivityLogSta": "Deploy-AzActivity-Sta",
            "deployAzResourceDiagnostics": "Deploy-AzResource-Diag",
            "deployVmMonitoring": "Deploy-VM-Monitoring",
            "deployWindowsArcMonitoring": "Deploy-WS-Arc-Monitoring",
            "deployLinuxArcMonitoring": "Deploy-LX-Arc-Monitoring",
            "deployVmssMonitoring": "Deploy-VMSS-Monitoring",
            "deployAzSecurityCenterPricing": "Deploy-ASC-Pricing",
            "deployAzSecurityCenterAutoProvision": "Deploy-ASC-AutoProvision",
            "deployAscMonitoring": "Enable-ASC-Monitoring"
        },
        "rbac": {
            "owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
            "contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "logAnalyticsContributor": "92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "securityAdmin": "fb1c8493-542b-48eb-b624-b4c8fea62acd"
        },
        "roleAssignmentNames": {
            "deployAzActivityLogLa": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzActivityLogLa))]",
            "deployAzActivityLogSta": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzActivityLogSta))]",
            "deployAzResourceDiagnostics": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').deployAzResourceDiagnostics))]",
            "deployVmMonitoring": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployVmMonitoring))]",
            "deployWindowsArcMonitoring": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployWindowsArcMonitoring))]",
            "deployLinuxArcMonitoring": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployLinuxArcMonitoring))]",
            "deployVmssMonitoring": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployVmssMonitoring))]",
            "deployAzSecurityCenterPricing": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzSecurityCenterPricing))]",
            "deployAzSecurityCenterAutoProvision": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision))]",
            "deployAscMonitoring": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').deployAscMonitoring))]"
        },
        "blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}",
        "namingPrefix": "[concat(parameters('companyPrefix'), '-', parameters('locationPrefix'), '-', parameters('environmentPrefix'))]",
        "resourceGroupName": "[toLower(concat(variables('namingPrefix'), '-', parameters('argPrefix'), '-monitoring'))]",
        "logAnalyticsName": "[toLower(take(concat(variables('namingPrefix'), '-', parameters('omsPrefix'), '-', guid(parameters('companyPrefix'))), 24))]",
        "storageNamingPrefix": "[concat(parameters('companyPrefix'), parameters('locationPrefix'), parameters('environmentPrefix'))]",
        "storageName": "[take(toLower(concat(variables('storageNamingPrefix'), parameters('staPrefix'), guid(parameters('companyPrefix')))), 20)]",
        "landingZones": {
            "lzAscPricing": "[take(concat('lzAscPricing', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "lzAscAutoProvision": "[take(concat('lzAscAutoProvision', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "lzAzActivityLogsLa": "[take(concat('lzAzActivityLogsLa', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "lzAzActivityLogsSta": "[take(concat('lzAzActivityLogsSta', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]"
        },
        "management": {
            "mgAscPricing": "[take(concat('mgAscPricing', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "mgAscAutoProvision": "[take(concat('mgAscAutoProvision', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "mgAzActivityLogsLa": "[take(concat('mgAzActivityLogsLa', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "mgAzActivityLogsSta": "[take(concat('mgAzActivityLogsSta', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]"
        },
        "identity": {
            "idAscPricing": "[take(concat('idAscPricing', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "idAscAutoProvision": "[take(concat('idAscAutoProvision', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "idAzActivityLogsLa": "[take(concat('idAzActivityLogsLa', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "idAzActivityLogsSta": "[take(concat('idAzActivityLogsSta', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]"
        },
        "connectivity": {
            "connAscPricing": "[take(concat('connAscPricing', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "connAscAutoProvision": "[take(concat('connAscAutoProvision', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "connAzActivityLogsLa": "[take(concat('connAzActivityLogsLa', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "connAzActivityLogsSta": "[take(concat('connAzActivityLogsSta', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]"
        },
        "noOnlineLzActivityDeployment": "naOnlineActivity",
        "noOnlineLzAscDeployment": "naOnlineAsc",
        "noCorpLzActivityDeployment": "naCorpActivity",
        "noCorpLzAscDeployment": "naCorpAsc",
        "noIdActivityDeployment": "noIdActivity",
        "noIdAscDeployment": "noIdAsc",
        "noConnActivityDeployment": "noConnActivity",
        "noConnAscDeployment": "noConnAscDeployment",
        "apiVersions": {
            "deployments": "2020-06-01",
            "policyAssignments": "2020-03-01",
            "roleAssignments": "2020-04-01-preview"
        }
    },
    "resources": [
        // Conditional assignment of /azure Policy to enforce activity logs from subscriptions to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
                "displayName": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzActivityLogLa]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    },
                    "logsEnabled": {
                        "value": "True"
                    }
                }
            }
        },
        // Role assignment for the conditional Azure Policy assignment for Azure Activity Logs to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzActivityLogLa]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzActivityLogLa]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce activity logs from subscriptions to Storage Account
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLtrStorage'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
                "displayName": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzActivityLogSta]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "storageAccountId": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional Azure Policy assignment for Azure Activity Logs to Storage Account
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLtrStorage'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzActivityLogSta]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzActivityLogSta]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableLtrStorage'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogSta), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Log Analytics VM extension to Windows and Linux virtual machines
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployVmMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployVmMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployVmMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').vmMonitoring]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics_1": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment of the conditional VM monitoring policy assignment
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployVmMonitoring]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployVmMonitoring]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes')), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployVmMonitoring), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure policy to enforce VMSS monitoring to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployVmssMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployVmssMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployVmssMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').vmssMonitoring]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics_1": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment of the conditional VMSS monitoring policy assignment
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployVmssMonitoring]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployVmssMonitoring]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Yes')), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployVmssMonitoring), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Windows Arc monitoring to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployWindowsArcMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployWindowsArcMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployWindowsArcMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').windowsArcMonitoring]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment of the conditional Windows Arc monitoring policy assignment
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployWindowsArcMonitoring]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployWindowsArcMonitoring]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes')), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployWindowsArcMonitoring), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Linux Arc monitoring to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployLinuxArcMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployLinuxArcMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployLinuxArcMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').linuxArcMonitoring]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment of the conditional Linux Arc monitoring policy assignment
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployLinuxArcMonitoring]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployLinuxArcMonitoring]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableArcMonitoring'), 'Yes')), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployLinuxArcMonitoring), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Azure Resource Diagnostics to Log Analytics
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
                "displayName": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
                "policyDefinitionId": "[variables('policyDefinitions').deployResourceDiagnostics]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment of the conditional Azure Resource Diagnostics policy assignment
        {

            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzResourceDiagnostics]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzResourceDiagnostics]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzResourceDiagnostics), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce ASC on subscriptions
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "Deploy-ASC-Defender",
                "displayName": "Deploy-ASC-Defender",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzureSecurity]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]",
                "parameters": {
                    "pricingTierVms": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "pricingTierSqlServers": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "pricingTierAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "pricingTierStorageAccounts": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "pricingTierContainerRegistry": {
                        "value": "[parameters('enableAscForRegistries')]"
                    },
                    "pricingTierKeyVaults": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "pricingTierKubernetesService": {
                        "value": "[parameters('enableAscForKubernetes')]"
                    },
                    "pricingTierArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "pricingTierDns": {
                        "value": "[parameters('enableAscForDns')]"
                    }
                }
            }
        },
        // Role assignment of the conditional ASC policy assignment
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzSecurityCenterPricing]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').securityAdmin)]",
                "principalId": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enable ASC monitoring
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAscMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAscMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployAscMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').ascMonitoring]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]"
            }
        },
        // Conditional deployments to invoke template for ActivityLog diagnostics on management subscription
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('management').mgAzActivityLogsLa]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ActivityLog diagnostics on identity subscription
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identity').idAzActivityLogsLa, variables('noIdActivityDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('identitySubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(and(not(empty(parameters('identitySubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ActivityLog diagnostics on connectivity subscription
        {
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivity').connAzActivityLogsLa, variables('noConnActivityDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ASC on management subscription
        {
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('management').mgAscPricing]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzureSecurity, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')) ,reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ASC on identity subscription
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identity').idAscPricing, variables('noIdAscDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('identitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzureSecurity, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('identitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes')) ,reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ASC on connectivity subscription
        {
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivity').connAscPricing, variables('noConnAscDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzureSecurity, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ActivityLog diagnostics on online subscription(s)
        {
            "condition": "[and(not(empty(parameters('onlineLzSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), concat(variables('landingZones').lzAzActivityLogsLa, copyIndex()), variables('noOnlineLzActivityDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "copy": {
                "name": "lzOnlineActivityCopy",
                "count": "[if(not(empty(parameters('onlineLzSubscriptionId'))), length(parameters('onlineLzSubscriptionId')), 1)]"
            },
            "subscriptionId": "[if(not(empty(parameters('onlineLzSubscriptionId'))), parameters('onlineLzSubscriptionId')[copyIndex()], '')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('onlineLzSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(and(not(empty(parameters('onlineLzSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ActivityLog diagnostics on corp subscription(s)
        {
            "condition": "[and(not(empty(parameters('corpLzSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), concat(variables('landingZones').lzAzActivityLogsLa, copyIndex()), variables('noCorpLzActivityDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "copy": {
                "name": "lzCorpActivityCopy",
                "count": "[if(not(empty(parameters('corpLzSubscriptionId'))), length(parameters('corpLzSubscriptionId')), 1)]"
            },
            "subscriptionId": "[if(not(empty(parameters('corpLzSubscriptionId'))), parameters('corpLzSubscriptionId')[copyIndex()], '')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('corpLzSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(and(not(empty(parameters('corpLzSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ASC on online subscription(s)
        {
            "condition": "[and(not(empty(parameters('onlineLzSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), concat(variables('landingZones').lzAscPricing, copyIndex()), variables('noOnlineLzAscDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "copy": {
                "name": "lzOnlineAscCopy",
                "count": "[if(not(empty(parameters('onlineLzSubscriptionId'))), length(parameters('onlineLzSubscriptionId')), 1)]"
            },
            "subscriptionId": "[if(not(empty(parameters('onlineLzSubscriptionId'))), parameters('onlineLzSubscriptionId')[copyIndex()], '')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzureSecurity, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployments to invoke template for ASC on corp subscription(s)
        {
            "condition": "[and(not(empty(parameters('corpLzSubscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), concat(variables('landingZones').lzAscPricing, copyIndex()), variables('noCorpLzAscDeployment'))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "copy": {
                "name": "lzCorpAscCopy",
                "count": "[if(not(empty(parameters('corpLzSubscriptionId'))), length(parameters('corpLzSubscriptionId')), 1)]"
            },
            "subscriptionId": "[if(not(empty(parameters('corpLzSubscriptionId'))), parameters('corpLzSubscriptionId')[copyIndex()], '')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzureSecurity, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        }
    ],
    "outputs": {}
}